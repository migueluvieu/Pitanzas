{"version":3,"sources":["services/validations/user-service.ts"],"names":["UserServiceValidation","UserServiceValidation.constructor","UserServiceValidation.getInstance","UserServiceValidation.getUser","UserServiceValidation.saveUser","UserServiceValidation.updateUser","UserServiceValidation.deleteUser"],"mappings":"AAEA,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,IAAY,SAAS,WAAM,WAAW,CAAC,CAAA;AACvC,2BAAkC,2BAA2B,CAAC,CAAA;AAC9D,2BAAgC,2BAA2B,CAAC,CAAA;AAG5D,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;AAE1D;;;;;GAKG;AACH;IAGIA;;OAEGA;IACJA;QACCC,EAAEA,CAAAA,CAACA,qBAAqBA,CAACA,SAASA,CAACA,CAAAA,CAACA;YAC3BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;QACxDA,CAACA;QACDA,qBAAqBA,CAACA,SAASA,GAAGA,IAAIA,CAACA;IAC3CA,CAACA;IAEDD;;;;OAIGA;IACIA,iCAAWA,GAAlBA;QACIE,MAAMA,CAACA,qBAAqBA,CAACA,SAASA,CAACA;IAC3CA,CAACA;IAEAF;;;;;OAKGA;IACHA,uCAAOA,GAAPA,UAAQA,EAASA;QACdG,MAAMA,CAACA,KAAKA,CAACA,SAASA,CAACA,CAACA;QACvBA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,EAAEA,CAACA,CAACA,CAAAA,CAACA;YAC1BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;QACvDA,CAACA;IACLA,CAACA;IAEDH;;;;OAIGA;IACHA,wCAAQA,GAARA,UAASA,IAAUA;QAChBI,MAAMA,CAACA,KAAKA,CAACA,UAAUA,CAACA,CAACA;QACzBA,cAAcA;QACdA,EAAEA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAAAA,CAACA;YAC7BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,CAACA;QACxDA,CAACA;QACDA,EAAEA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAAAA,CAACA;YAC9BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;QACvDA,CAACA;QACDA,4CAA4CA;QAC5CA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,IAAEA,IAAIA,CAACA,CAAAA,CAACA;YAChBA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA;QACrDA,CAACA;QAEDA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,CAACA,GAAGA,CAACA,QAAQA,EAAEA,CAACA,CAACA,CAAAA,CAACA;YAC3CA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,CAACA;QACxDA,CAACA;QAEDA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,OAAOA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAAAA,CAACA;YAChCA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,qBAAqBA,CAACA,CAACA,CAACA,CAACA;QAC1DA,CAACA;QACDA,yCAAyCA;QACzCA,IAAIA,CAACA,IAAIA,GAAGA,SAASA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,WAAWA,EAAEA,CAACA;QACpDA,IAAIA,CAACA,KAAKA,GAAGA,SAASA,CAACA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,WAAWA,EAAEA,CAACA;IACzDA,CAACA;IAEAJ;;;;OAIGA;IACHA,0CAAUA,GAAVA,UAAWA,IAASA;QAClBK,MAAMA,CAACA,KAAKA,CAACA,YAAYA,CAACA,CAACA;QACvBA,yBAAyBA;QAC7BA,EAAEA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,CAAAA,CAACA;YAC3BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA;QAClDA,CAACA;QACHA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,CAAAA,CAACA;YAC/BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;QACrDA,CAACA;QACHA,EAAEA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAAAA,CAACA;YAC7BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,CAACA;QACtDA,CAACA;QACHA,4CAA4CA;QAC5CA,EAAEA,CAACA,CAACA,IAAIA,CAACA,GAAGA,IAAEA,IAAIA,CAACA,CAAAA,CAACA;YAChBA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,gBAAgBA,CAACA,CAACA,CAACA,CAACA;QACrDA,CAACA;QAEDA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,IAAIA,CAACA,GAAGA,CAACA,QAAQA,EAAEA,CAACA,CAACA,CAAAA,CAACA;YAC3CA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,mBAAmBA,CAACA,CAACA,CAACA,CAACA;QACxDA,CAACA;QACDA,EAAEA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAAAA,CAACA;YAC7BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;QACtDA,CAACA;QACHA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,OAAOA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAAAA,CAACA;YAChCA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,qBAAqBA,CAACA,CAACA,CAACA,CAACA;QACxDA,CAACA;QACHA,yCAAyCA;QACzCA,IAAIA,CAACA,IAAIA,GAAGA,SAASA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,WAAWA,EAAEA,CAACA;QACpDA,IAAIA,CAACA,KAAKA,GAAGA,SAASA,CAACA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,WAAWA,EAAEA,CAACA;IACzDA,CAACA;IAEDL,0CAAUA,GAAVA,UAAWA,EAASA;QACjBM,MAAMA,CAACA,KAAKA,CAACA,YAAYA,CAACA,CAACA;QAC1BA,EAAEA,CAACA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,EAAEA,CAACA,CAACA,CAAAA,CAACA;YAC1BA,MAAKA,CAACA,IAAIA,KAAKA,CAACA,sBAAMA,CAACA,GAAGA,CAACA,uBAACA,CAACA,kBAAkBA,CAACA,CAACA,CAACA,CAACA;QACvDA,CAACA;IACLA,CAACA;IA1GcN,+BAASA,GAAyBA,IAAIA,qBAAqBA,EAAEA,CAACA;IA6GlFA,4BAACA;AAADA,CA9GA,AA8GCA,IAAA;AA9GY,6BAAqB,wBA8GjC,CAAA","file":"services/validations/user-service.js","sourcesContent":["import {User} from './../../models/user-model'\nimport {IUser} from './../../models/mongoose/user-mongoose';\nimport * as log4js from 'log4js';\nimport * as validator from 'validator';\nimport {AppConfig as config} from './../../config/app-config';\nimport {Constantes as _ }  from './../../common/constantes';\n\n\nlet logger = log4js.getLogger(\"validations/user-service\");\n\n/**\n * Clase que valida los campos y realiza las transformaciones y normalizaciones necesarias \n * de cada método del servicio UserService \n * @export\n * @class UserServiceValidation\n */\nexport class UserServiceValidation {\n     private static _instance:UserServiceValidation = new UserServiceValidation();\n     \n    /**\n     * Devuelve instancia de UserServiceValidation. Singleton\n     */\n   constructor() {\n    if(UserServiceValidation._instance){\n             throw(new Error(config.msg(_.ERR_USER_INSTANCIA)));\n        }\n        UserServiceValidation._instance = this;\n    }\n    \n    /**\n     * Devuelve instancia de UserServiceValidation. Singleton\n     * @static\n     * @returns {UserService}\n     */\n    static getInstance():UserServiceValidation {\n        return UserServiceValidation._instance;    \n    }\n     \n     /**\n      * \n      * Valida los parámetros del método getUser\n      * @param {string} id\n      * @returns {string} id\n      */\n     getUser(id:string){\n        logger.debug(\"getUser\"); \n         if (!validator.isMongoId(id)){\n             throw(new Error(config.msg(_.ERR_USER_FORMAT_ID)));\n         }       \n     }\n      \n     /**\n      * Valida parámetros método saveUser del service\n      * @param {IUser} user\n      * @returns {IUser}\n      */ \n     saveUser(user:IUser){\n        logger.debug(\"saveUser\");        \n        //validaciones\n        if (validator.isNull(user.name)){\n            throw(new Error(config.msg(_.ERR_USER_REQ_NOMBRE)));\n        } \n        if (validator.isNull(user.email)){\n            throw(new Error(config.msg(_.ERR_USER_REQ_EMAIL)));\n        }\n        //Este validator solo aplica sobre string...\n        if (user.age==null){\n            throw(new Error(config.msg(_.ERR_USER_REQ_AGE)));\n        }\n\n        if (!validator.isNumeric(user.age.toString())){\n            throw(new Error(config.msg(_.ERR_USER_FORMAT_AGE)));\n        }\n        \n        if (!validator.isEmail(user.email)){\n            throw(new Error(config.msg(_.ERR_USER_FORMAT_EMAIL)));\n        }                         \n        //pipes, transformamos/normalizamos datos\n        user.name = validator.trim(user.name).toLowerCase();\n        user.email = validator.trim(user.email).toLowerCase();\n     }   \n      \n      /**\n       * Valida parámetros método updateUser del service \n       * @param {User} user\n       * @returns {User}\n       */\n      updateUser(user:User){\n        logger.debug(\"updateUser\");        \n            //validaciones           \n        if (validator.isNull(user.id)){\n            throw(new Error(config.msg(_.ERR_USER_REQ_ID)));\n          } \n        if (!validator.isMongoId(user.id)){\n            throw(new Error(config.msg(_.ERR_USER_FORMAT_ID)));\n          }\n        if (validator.isNull(user.name)){\n            throw(new Error(config.msg(_.ERR_USER_REQ_NOMBRE)));\n          } \n        //Este validator solo aplica sobre string...\n        if (user.age==null){\n            throw(new Error(config.msg(_.ERR_USER_REQ_AGE)));\n        }\n\n        if (!validator.isNumeric(user.age.toString())){\n            throw(new Error(config.msg(_.ERR_USER_FORMAT_AGE)));\n        }\n        if (validator.isNull(user.email)){\n             throw(new Error(config.msg(_.ERR_USER_REQ_EMAIL)));\n          }\n        if (!validator.isEmail(user.email)){\n            throw(new Error(config.msg(_.ERR_USER_FORMAT_EMAIL)));\n          }                         \n        //pipes, transformamos/normalizamos datos\n        user.name = validator.trim(user.name).toLowerCase();\n        user.email = validator.trim(user.email).toLowerCase();\n     }  \n\n     deleteUser(id:string){\n        logger.debug(\"deleteUser\");\n         if (!validator.isMongoId(id)){\n             throw(new Error(config.msg(_.ERR_USER_FORMAT_ID)));\n         }      \n     }\n\n\n}\n"],"sourceRoot":"/source/"}