{"version":3,"sources":["services/user-service.ts"],"names":["UserService","UserService.constructor","UserService.getInstance","UserService.getUsers","UserService.getUser","UserService.saveUser","UserService.updateUser","UserService.deleteUser"],"mappings":"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","file":"services/user-service.js","sourcesContent":["import {User} from './../models/user-model'\nimport {UserDAO} from \"./../dao/user-dao\";\nimport {IUser} from './../models/mongoose/user-mongoose';\nimport {UserServiceValidation} from './validations/user-service';\nimport * as log4js from 'log4js';\nimport {UserExistError, UserNotExistError} from './../exceptions/user-exceptions';\nimport {AppConfig as config} from './../config/app-config';\nimport {Constantes as _ }  from './../common/constantes';\n\nlet logger = log4js.getLogger(\"user-services\");\n\n\n/**\n * Clase que gestiona la lógica de negocio sobre entidad usuario  \n * @export\n * @class UserService\n */\n\nexport class UserService {\n\n  private static _instance:UserService = new UserService();\n  \n  private _validateAndPipe:UserServiceValidation = UserServiceValidation.getInstance();\n\n  private _userDAO:UserDAO = UserDAO.getInstance();\n     \n   /**\n     * Devuelve instancia de UserService. Singleton.\n     */\n   constructor() {\n    if(UserService._instance){\n             throw(new Error(config.msg(_.ERR_USER_INSTANCIA)));\n        }\n        UserService._instance = this;\n    }\n    \n    /**\n     * Devuelve instancia de UserService. Singleton\n     * @static\n     * @returns {UserService}\n     */\n    static getInstance():UserService {\n        return UserService._instance;    \n    }\n\n     /**\n      * Obtiene todos los usuarios\n      * @param {(user: IUser, error:Error) => void} callback funciòn callback \n      * cuya funcionalidad estará la invocación desde controller\n      */     \n     getUsers(): Promise<IUser[]>{\n        logger.debug(\"getUsers\"); \n        return new Promise<IUser[]>((resolve,reject)=>{       \n            this._userDAO.findAll().then(\n                data=>{resolve(data)},\n                err =>{reject(err)}   \n            ); \n         })      \n     }\n    \n    /** \n     * Obtiene un usuario a partir de su id\n     * @param {string} id\n     * @param {(user: IUser, error:Error) => void} callback funciòn callback \n     * cuya funcionalidad estará la invocación desde controller\n     */\n     getUser(id: string): Promise<IUser>{\n        logger.debug(\"getUser\");         \n        return new Promise<IUser>((resolve, reject)=>{\n            //se valida entrada y normaliza. Es promise la validación\n             this._validateAndPipe.getUser(id);\n             this._userDAO.findById(id)\n              .then(user => {\n                    if (user===null){throw new UserNotExistError();}\n                    else {resolve(user) } \n                 })                 \n              .catch(err => { reject(err) });\n             }\n         );\n     } \n\n     /** \n      * Busca un usuario por nombre y si no lo encuentra lo inserta en BBDD \n      * @param {User} user\n      * @returns {Promise<IUser>}\n      */   \n     saveUser(user: User): Promise<IUser> {\n         logger.debug(\"saveUser\");\n         return new Promise<IUser>((resolve, reject) => {\n             this._validateAndPipe.saveUser(user.payload);\n             this._userDAO.findByName((user.payload)) \n              .then((_user) =>{ \n                 // si no hay usuario con ese nombre, se crea. \n                 //ojo, solo puede/debe hacer return de promise, por eso el error se lanza\n                 if (_user===null) {return this._userDAO.create(user.payload)}\n                 else {throw new UserExistError();} \n                  }) \n              .then( (_user) => resolve(_user))      \n              .catch(err => { reject(err) });\n          }\n         );\n     }\n  \n\n     /**\n     * Busca el usuario por id y lo actualiza con los datos enviados \n     * @param {User} user\n     * @returns {Promise<IUser>}\n     */\n     updateUser(user:User): Promise<IUser>{\n        logger.debug(\"updateUser\");\n        return new Promise<IUser>((resolve,reject)=>{\n          this._validateAndPipe.updateUser(user)         \n          this._userDAO.findByIdAndUpdate(user)   \n          .then(data => { resolve(data) })                 \n          .catch(err => { reject(err) });\n         })     \n     }\n     \n   /**\n     * Busca el usuario por id y lo elimina\n     * @param {string} id\n     * @returns {Promise<IUser>}\n     */\n     deleteUser(id:string): Promise<IUser>{\n        logger.debug(\"deleteUser\");\n         return new Promise<IUser>((resolve,reject)=>{\n         this._validateAndPipe.deleteUser(id)\n         this._userDAO.findByIdAndRemove(id) \n         .then(data => { resolve(data) })                \n         .catch(err => { reject(err) });\n         })        \n      }\n  \n    /**\n      * Este sería el saveUser pero con callback en vez de promises, para ver otra posibilidad.\n      * recibeuna función que llamaremos callback y que se le pasará desde el controller.\n      * Será una función callback cuyo contenido estará en el controller (normalmente será el envío del resultado en JSON)\n      * mirar la llamada del controller:\n            userService.getUsers( \n                     (userList)=>{\n                       res.send(JSON.stringify(userList)); \n                    }\n            ); \n      * La callback recibirá el resultado de esta función es decir, en este\n      * caso será la lista de usuarios resultantes del findAll().  \n      */\n /*\n    saveUser(user:User,callback: (user: IUser, error:Error) => void): void{\n        logger.debug(\"saveUser\"); \n            // validamos los parámetros que recibe la función\n        this._validateAndPipe.saveUser(user)\n         .then(\n            (_user)=>{\n                //si se ha validado, se aplica negocio.\n                 UserDAO.findOrCreate(user).then(\n                (data)=>{callback(data, null)},\n                (err) =>{callback(null,err)});\n                })\n          .catch((err) =>{callback(null,err)}\n          )        \n     }   \n*/\n\n}\n"],"sourceRoot":"/source/"}