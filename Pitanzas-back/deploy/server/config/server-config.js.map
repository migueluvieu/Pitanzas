{"version":3,"sources":["config/server-config.ts"],"names":[],"mappings":"AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,MAAM,WAAO,mBAAmB,CAAC,CAAA;AAE7C,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,IAAY,YAAY,WAAM,eAAe,CAAC,CAAA;AAC9C,IAAY,UAAU,WAAM,aAAa,CAAC,CAAA;AAC1C,IAAY,cAAc,WAAM,6BAA6B,CAAC,CAAA;AAC9D,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,2BAA+B,wBAAwB,CAAC,CAAA;AAExD,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;AAGpC,WAAG,GAAG,OAAO,EAAE,CAAC;AAE3B,6CAA6C;AAC7C,WAAG,CAAC,GAAG,CAAC,uBAAC,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;AAC1C,WAAG,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;AAChD,WAAG,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AAC/B,WAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,WAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACnD,WAAG,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC;AACxB,WAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxD,qDAAqD;AACrD,WAAG,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;AAC3E,WAAG,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;AAC3B,WAAG,CAAC,GAAG,CAAC,eAAe,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;AACrD,0DAA0D;AAC1D,WAAG,CAAC,GAAG,CAAC,UAAC,GAAS,EAAE,GAAoB,EAAE,GAAqB,EAAE,IAA0B;IACzF,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC1B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAChB,GAAG,CAAC,IAAI,CAAE;QACR,KAAK,EAAE,GAAG,CAAC,OAAO;KACnB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"config/server-config.js","sourcesContent":["import * as express from 'express';\nimport * as routes  from './../routes/index';\nimport * as http from 'http';\nimport * as path from 'path';\nimport * as favicon from 'serve-favicon';\nimport * as cookieParser from 'cookie-parser';\nimport * as bodyParser from 'body-parser';\nimport * as userController from './../routes/user-controller';\nimport * as log4js from 'log4js';\nimport {Constantes as _}  from './../common/constantes';\n\nlet logger = log4js.getLogger('server-config');\n\n\nexport let app = express();\n\n//configuracion express, middleware y setters\napp.set(_.PORT, process.env.PORT || 3000);\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n//conecta logger con express para pintar los accesos \napp.use(log4js.connectLogger(log4js.getLogger(\"http\"), { level: 'auto' }));\napp.get('/', routes.index);\napp.use(\"/api/v1/users\", userController.usersRouter);\n// captura todos los errores procedentes de los middleware\napp.use((err:Error, req: express.Request, res: express.Response, next: express.NextFunction)=> {\n  logger.error(err.message);\n  res.status(500);\n  res.send( {\n    error: err.message\n  });\n});\n\n\n\n\n\n"],"sourceRoot":"/source/"}