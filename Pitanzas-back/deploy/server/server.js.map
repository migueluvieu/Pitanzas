{"version":3,"sources":["server.ts"],"names":[],"mappings":"AACA,gDAAgD;AAIhD,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,IAAY,OAAO,WAAO,SAAS,CAAC,CAAA;AACpC,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,2BAAgC,qBAAqB,CAAC,CAAA;AACtD,2BAAkC,qBAAqB,CAAC,CAAA;AACxD,8BAAkC,wBAAwB,CAAC,CAAA;AAI3D,yBAAyB;AAEzB,sBAAsB;AACtB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC,uBAAC,CAAC,eAAe,CAAC,CAAC,CAAC;AACzD,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACxC,MAAM,CAAC,IAAI,CAAC,kCAAkC,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,uBAAC,CAAC,WAAW,CAAC,CAAC;AAEvF,eAAe;AACf,QAAQ,CAAC,OAAO,CAAC,sBAAM,CAAC,GAAG,CAAC,uBAAC,CAAC,SAAS,CAAC,CAAC,CAAC;AAC1C,IAAI,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC;AAC7B,+DAA+D;AAC/D,EAAE,CAAC,EAAE,CAAC,OAAO,EAAC,UAAA,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC;AACxE,kHAAkH;AAClH,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,cAAM,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,sBAAM,CAAC,GAAG,CAAC,uBAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC;AAIrF;;;;;;;;;;;;;;GAcG;AACH,IAAI,OAAO,GAAC,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;AAE7B,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA,CAAC;IACpB,mDAAmD;IACnD,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAC,CAAC;QAChC,OAAO,CAAC,IAAI,EAAE,CAAC;IACjB,CAAC;AAEH,CAAC;AAAC,IAAI,CAAC,CAAC;IACJ,gFAAgF;IAChF,IAAI,CAAC,YAAY,CAAC,mBAAY,CAAC,CAAC,MAAM,CAAC,mBAAY,CAAC,GAAG,CAAC,uBAAC,CAAC,IAAI,CAAC,EAAE;QAC7D,MAAM,CAAC,IAAI,CAAC,qCAAqC,GAAG,mBAAY,CAAC,GAAG,CAAC,uBAAC,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,OAAO,CAAC,GAAG,CAAE,CAAC;IAC5G,CAAC,CAAC,CAAC;AACP,CAAC","file":"server.js","sourcesContent":["\n/// <reference path=\"./../typings/index.d.ts\" />\n\nimport * as express from 'express';\nimport * as routes  from './routes/index';\nimport * as http from 'http';\nimport * as path from 'path';\nimport * as mongoose from 'mongoose';\nimport * as log4js from 'log4js';\nimport * as cluster  from 'cluster';\nimport * as os from 'os';\nimport {Constantes as _ }  from './common/constantes';\nimport {AppConfig as config} from './config/app-config';\nimport {app as serverConfig} from './config/server-config'; \n\n\n\n/**CONEXIONES EXTERNAS */\n\n//logger configuracion\nlog4js.configure(path.join(__dirname,_.CONFIG_LOG_FILE));\nlet logger = log4js.getLogger(\"server\");\nlogger.info(\"Configurando server para entorno\", process.env.NODE_ENV || _.ENTORNO_DEV);\n\n//conexion BBDD\nmongoose.connect(config.key(_.MONGO_URL));\nlet db = mongoose.connection;\n//Se captura en evento si hay error cuando se intenta conectar \ndb.on('error',error=> {logger.error(\"Error al conectar BBDD\", error);});\n//se captura el evento open pero con el \"once\" (en vez de on) significa que solo ejecuta manejador la primera vez \ndb.once('open', ()=> {logger.info(\"Conectado a la BBDD\", config.key(_.MONGO_URL));});\n\n\n\n/**\n * Ventajas de crear un cluster, \n * leer http://alexfernandez.github.io/2013/modo-cluster.html\n * leer https://nodejs.org/api/cluster.html\n * Básicamente node es mono-procesador. El proceso del servidor se crea en un solo procesador desaprovechando \n * el potencial de la máquina ya que hoy en día suelen tener ya varios núcleos. \n * Al crear un cluster, podemos crear tantos procesos de creación de servidor (en realidad copias del proceso) como \n * procesadores tenga la máquina, aumentando el rendimiento exponencialmente\n * un sencillo fork() crea una copia del proceso actual (en este caso nuetro proceso es la creación del servidor).\n * A partir de ese momento el primer proceso se convierte en maestro o master, \n * y la copia en un trabajador o worker. (mi ordenador tiene 4 núcleos, creará 4 workers, cada uno con \n * la copia del proceso de creación). Los 4 se quedan en espera por el puerto que se haya abierto (en mi caso el 3000) \n * El propio node repartirá las peticiones entrantes entre los procesos que escuchan por el mismo puerto. Tiende a cargar \n * más unos procesadores que otros, no es equitativo.  \n */\nlet numCPUs=os.cpus().length;\n\nif (cluster.isMaster){\n  // crea workers, uno por CPU que haya en el sistema\n  for (var i = 0; i < numCPUs; i++){\n    cluster.fork();\n  }\n \n} else {\n    //En los workers (es decir, cluster.isMaster es falso) creamos un servidor HTTP:\n    http.createServer(serverConfig).listen(serverConfig.get(_.PORT), () => {\n        logger.info('Levantado server :: listening port ' + serverConfig.get(_.PORT), \" => pid \", process.pid );\n    });\n}\n\n\n\n\n"],"sourceRoot":"/source/"}